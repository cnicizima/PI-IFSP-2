QUANDO CLONAR:
ABRIR TERMINAL NA RAIZ E DAR 'npm install'
DEPOIS ENTRAR CD BACKEND E DAR 'npm install' no backend tambem
para testar: na raiz(front) npm start (porta 3000) e em outro terminal, entrar cd backend e "npm start" (porta 4000)


----------------------------------------
Passo a passo do express:

1)instalar node - npm install
2) npm init - começa um projeto
3) npm i express generator na pasta de front - instala o express
4) npm i npm -g (acho que instala global)
5) npx express-generator (ai sim cria um projeto expresS)
6) npm install
7) npm start. 

Agora é configurar as rotas:

o express no frontend serve para rodar o projeto front em uma porta local.

app.js nao precisa alterar nada. pois ja diz que o 3000/ vai para o index por causa do bin. mas incluir:
// Defina a porta desejada
const PORT = process.env.PORT || 3000;
console.log(`Servidor rodando na porta ${PORT}`);

nas rotas index, colocar os gets pra obter a pagina estatica:

router.get('/', async (req, res) => {
  res.sendFile(path.join(__dirname, '../public/index.html'));
});

router.get('/destinos', async (req, res) => {
  res.sendFile(path.join(__dirname, '../public/destinos.html'));
});

etc.

depois, seguir passo 2, 3, 4,5 6 e 7 para a pasta backend. E isntalar o cors (npm install cors

no arquivo app.js incluir: 
"const cors = require('cors');" e "app.use(cors());"
// Defina a porta desejada
const PORT = process.env.PORT || 4000;
console.log(`Servidor rodando na porta ${PORT}`);

------------------------------
a logica é: porta 3000 roda local os estatico do front
cors para rodar duas portas
back roda na 4000 com apenas uma /routes/pacotes
no pacotes, vou ter os GET, DELETE dos pacotes. router.get('api/pacote/:id'){}
e no script do admin, vai ter um fecht no localhost:4000/api/pacote/id pra criar um pacote, etc.

------------------------------
Para usar o prisma:

npm install prisma @prisma/client
npx prisma init
DATABASE_URL="file:./dev.db" no env (para sqlite)

npx prisma migrate dev --name nome_da_migration (qdo tiver o schema pronto)
npx prisma migrate status (para ver status)
npx prisma generate - para criar o client que vai interagir com o banco


Ex de Schema:
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Clientes {
  cpf        BigInt    @id
  nome       String
  email      String    @unique
  endereco   String
  cidade     String
  UF         String
  telefone   String
  nascimento DateTime
  sexo       String?
  // Relacionamento com Compras
  compras    Compras[]
}

model Destinos {
  id        Int       @id @default(autoincrement())
  imagem    String
  nome      String
  avaliacao String
  reviews   Int
  descricao String
  preco     Float
  // Relacionamento com Compras
  compras   Compras[]
}

model Compras {
  numeroCompra Int      @id @default(autoincrement())
  cliente      Clientes @relation(fields: [clienteCpf], references: [cpf])
  clienteCpf   BigInt
  destino      Destinos @relation(fields: [destinoId], references: [id])
  destinoId    Int // Relacionamento com Destinos pelo campo 'id'
  quantidade   Int
  data         DateTime
}


------------------------------
configurando o banco de dados com o prisma para dar certo:
criar um .env na raiz com o: DATABASE_URL="file:./prisma/dev.db"

corrigir o dotenv dentro do app.js do backend:
const dotenv = require('dotenv');
dotenv.config({ path: '../.env' });
isto porque o env estava um nivel acima de onde estava o app.js 

O caminho estava errado.

O esquema prisma deve ligar à URL:

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

COM OS CAMINHOS CORRETOS - DOTENV TER QUE ESTAR INSTALADO (npm i dotenv)TANTO NO BACK QTO NO front

RODAR npx prisma migrate dev e depois npx prisma generate.

Antes de rodar, verificar se tem o prisma e o prisma client instalado no package-json


------------------------------


